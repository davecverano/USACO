/*
ID: verano.1
TASK: dualpal
LANG: C++                 
*/
/* LANG can be C++11 or C++14 for those more recent releases */
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>
using namespace std;

string convertnumberarray(vector<int> numberarray){
	vector<char> newarray;
	for(int i = 0;i<numberarray.size();i++){
		if(numberarray[numberarray.size()-i-1]>=0&&numberarray[numberarray.size()-i-1]<=9){
			newarray.push_back(char(numberarray[numberarray.size()-i-1])+'0');

		}
		else{
			newarray.push_back(char('A'+numberarray[numberarray.size()-i-1]-10));
		}
	}
	string newstring(newarray.begin(),newarray.end());
	return newstring;
}

string convertbases(int number,int base){
	
	vector<int> newnumber;
	
	int power = 0;
	while(pow(base,power+1)<number){
		power++;
	}
	while(number!=0){
		int remainder = number%base;
		newnumber.push_back(remainder);
		number = number/base;
	}
	string convertedarray = (convertnumberarray(newnumber));
	return convertedarray;
}

int palendrome(string number){
	for(int i = 0;i<number.length();i++){
		if(number[i]!=number[number.length()-i-1]){
			return 0;
		}
	}
	return 1;
}
int main(){

ofstream fout ("dualpal.out");
ifstream fin ("dualpal.in");

int amounttocheck;
int input;

fin >> amounttocheck;
fin >> input;

int i = 1;
while(amounttocheck!=0){
	int numberofbases = 0;
	for(int j = 2;j<=10;j++){
		if(palendrome(convertbases(input+i,j))){
			numberofbases++;
		}
	}
	if(numberofbases>1){
		fout << input+i << endl;
		amounttocheck--;
	}
	i++;
}
}
